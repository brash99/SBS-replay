#include <TROOT.h>
#include <TGraph.h>
#include <TGraphErrors.h>
#include <iostream>
#include <fstream>
#include <TMath.h>
#include <TH1.h>
#include <TH1D.h>
#include <TH2.h>
#include <TF1.h>
#include <TF2.h>
#include <TFile.h>
#include <TTree.h>
#include <TChain.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <TSystem.h>
#include <TLatex.h>

static const int TDCmult_cut = 7;
static const double xcut = 998.0;
static const double TDC_calib_to_ns = 0.01;
static const double HotChannelRatio = 200.0;

static const int NumPaddles = 16;
static const int NumBars = 14;
static const int NumLayers = 2;
static const int NumSides = 2;
static const int NumModules = 3;
static const int NumHalfModules = NumModules*NumSides*NumLayers;

static const int nTdc = NumHalfModules*NumBars*NumPaddles;
static const int nBarsTDC = nTdc;
static const int nRef = 2;
static const int NumRefPaddles = NumPaddles*nRef;

static const int nBarsADC = 0;
static const double ADCCUT = 150.;//100.0;

const TString REPLAYED_DIR = "/adaqfs/home/a-onl/sbs/Rootfiles";
const TString ANALYSED_DIR = "/adaqfs/home/a-onl/sbs/Rootfiles/cdetFiles/cdet_histfiles";

// // for local analysis at uog (please leave in comments)
// TString REPLAYED_DIR = "/w/work0/home/rachel/HallA/BB_Hodo/FallRun2021/Replayed";
//TString REPLAYED_DIR = "/w/work2/jlab/halla/sbs_hodo/Rootfiles";
//TString ANALYSED_DIR = "/w/work2/jlab/halla/sbs_hodo/Rootfiles/bbhodo_hist";
//TString ANALYSED_DIR = "/w/work0/home/rachel/HallA/BB_Hodo/FallRun2021/Analysed";

namespace TCDet {
  Int_t NdataMult;
  Double_t TDCmult[nTdc];

  Int_t NdataRawElID;
  Double_t RawElID[nTdc];
  Int_t NdataRawElLE;
  Double_t RawElLE[nTdc];
  Int_t NdataRawElTE;
  Double_t RawElTE[nTdc];
  Int_t NdataRawElTot;
  Double_t RawElTot[nTdc];
  
  Int_t NdataGoodRow;
  Double_t GoodRow[nTdc];
  Int_t NdataGoodCol;
  Double_t GoodCol[nTdc];
  Int_t NdataGoodLayer;
  Double_t GoodLayer[nTdc];

  Int_t NdataGoodElID;
  Double_t GoodElID[nTdc];
  Int_t NdataGoodElLE;
  Double_t GoodElLE[nTdc];
  Int_t NdataGoodElTE;
  Double_t GoodElTE[nTdc];
  Int_t NdataGoodElTot;
  Double_t GoodElTot[nTdc];

  Int_t NdataGoodX;
  Double_t GoodX[nTdc];
  Int_t NdataGoodY;
  Double_t GoodY[nTdc];
  Int_t NdataGoodZ;
  Double_t GoodZ[nTdc];

};

TChain *T = 0;
  
//===================================================== Histogram Declarations
// number of histo bins
const int NTDCBins = 200;
const double TDCBinLow = 1;
const double TDCBinHigh = 4601;
const int NTotBins = 1500;
const double TotBinLow = 1.;
const double TotBinHigh = 4501.;

const int num_bad = 76;
const int bad_channels[] = {
		45,   224, 226, 234, 241, 284, 240, 604, 690, 698, 702,
		864, 1174,1437,1488,1726,1912,2131,2132,2213,2214,
		2411,2417,2425,2426,2427,2434,2436,2437,2438,2448, 2457,
		2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,
		2476,2477,2478,2479,2502,2517,2518,2519,2520,2522,
		2592,2607,2613,2614,2616,2620,2624,2628,2632,2633,
		2634,2656,2661,2664,2665,2666,2667,2673,2675,2681,
		2683,2687};


// Raw hits ie all hits
TH1F *hRawLe[nBarsTDC];
TH1F *hRawTe[nBarsTDC];
TH1F *hRawTot[nBarsTDC];
TH1F *hGoodLe[nBarsTDC];
TH1F *hGoodTe[nBarsTDC];
TH1F *hGoodTot[nBarsTDC];

TH1F *hAllRawLe;
TH1F *hAllRawTe;
TH1F *hAllRawTot;
TH1F *hAllRawPMT;
TH1F *hAllGoodLe;
TH1F *hAllGoodTe;
TH1F *hAllGoodTot;
TH1F *hAllGoodPMT;

TH2F *h2AllGoodLe;
TH2F *h2AllGoodTe;
TH2F *h2AllGoodTot;

TH1F *hRefRawLe;
TH1F *hRefRawTe;
TH1F *hRefRawTot;
TH1F *hRefRawPMT;
TH1F *hRefGoodLe;
TH1F *hRefGoodTe;
TH1F *hRefGoodTot;
TH1F *hRefGoodPMT;

TH1F *hMultiplicityL[nBarsTDC];
TH1F *hMultiplicity;


// hit channel id
TH1F *hHitPMT;
TH1F *hRow;
TH1F *hRowLayer1Side1;
TH1F *hRowLayer1Side2;
TH1F *hRowLayer2Side1;
TH1F *hRowLayer2Side2;
TH1F *hLayer;
TH1F *hCol;

TH1F *hHitX;
TH1F *hHitY;
TH1F *hHitZ;
TH2F *hHitXY1;
TH2F *hHitXY2;
  
// 2D histograms
TH2F* h2d_RawLE;
TH2F* h2d_RawTE;
TH2F* h2d_RawTot;

TH2F* h2d_GoodLE;
TH2F* h2d_GoodTE;
TH2F* h2d_GoodTot;

TH2F* h2d_Mult;

using namespace std;

bool check_bad(int pmt) {
	bool flag = false;
	if (num_bad == 0) return flag;
	for (int i=0;i<num_bad;i++) {
		if (pmt == bad_channels[i])  flag = true;
	}
	return flag;
}

void PlotRawTDC2DCut(Int_t RunNumber=1742, Int_t nevents=40000, 
	const TString InFilePrefix="cdet", 
	Double_t LeMin = 1150.0, Double_t LeMax = 1200.0,
	Double_t TotMin = 0.0, Double_t TotMax = 200.0){
  // InFile is the input file without absolute path and without .root suffix
  // nevents is how many events to analyse, -1 for all
  
  // To execute
  // root -l
  // .L PlotRawTDC2D.C+
  // PlotRawTDC2D("filename", -1)

  // hit channel id
  hHitPMT = new TH1F("hHitPMT","hHitPMT",nTdc,0,nTdc);
  hRow = new TH1F("RowNumber","RowNumber",680, 0, 680);
  hRowLayer1Side1 = new TH1F("RowNumberL1S1","RowNumberL1S1",680, 0, 680);
  hRowLayer1Side2 = new TH1F("RowNumberL1S2","RowNumberL1S2",680, 0, 680);
  hRowLayer2Side1 = new TH1F("RowNumberL2S1","RowNumberL2S1",680, 0, 680);
  hRowLayer2Side2 = new TH1F("RowNumberL2S2","RowNumberL2S2",680, 0, 680);
  hLayer = new TH1F("LayerNumber","LayerNumber",3, 0, 3);
  hCol = new TH1F("ColNumber","ColNumber",3, 0, 3);

  hHitX = new TH1F("HitXposition","HitXPosition",1000,-2.0,2.0);
  hHitY = new TH1F("HitYposition","HitYPosition",200,-0.5,0.5);
  hHitZ = new TH1F("HitZposition","HitZPosition",200,7.5,8.0);
  hHitXY1 = new TH2F("HitXY1position","HitXY1Position",9,-1.0,1.0,800,-2.0,2.0);
  hHitXY2 = new TH2F("HitXY2position","HitXY2Position",9,-1.0,1.0,800,-2.0,2.0);
  
  // 2D histograms
  h2d_RawLE  = new TH2F("h2d_RawLE","", NTDCBins,TDCBinLow,TDCBinHigh,nBarsTDC+1,0,nBarsTDC+1);
  h2d_RawTE  = new TH2F("h2d_RawTE","", NTDCBins,TDCBinLow,TDCBinHigh,nBarsTDC+1,0,nBarsTDC+1);
  h2d_RawTot = new TH2F("h2d_RawTot","", NTotBins,TotBinLow,TotBinHigh,nBarsTDC+1,0,nBarsTDC+1);
  h2d_Mult   = new TH2F("h2d_Mult","", 15,0,15,nBarsTDC+1,0,nBarsTDC+1);
  
  hMultiplicity = new TH1F("hMultiplicity","hMultiplicity",20,0,20);
  
  for(Int_t tdc=0; tdc<nBarsTDC; tdc++){
    hMultiplicityL[tdc] =  new TH1F(TString::Format("hMultiplicity_Bar%d",tdc),
		      TString::Format("hMultiplicity_Bar%d",tdc),
		      10, 0, 10);
  }// element loop

  hAllRawLe = new TH1F(TString::Format("hRawLe"),
            TString::Format("hRawLe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hAllRawTe = new TH1F(TString::Format("hRawTe"),
            TString::Format("hRawTe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hAllRawTot = new TH1F(TString::Format("hRawTot"),
            TString::Format("hRawTot"),
            NTotBins, TotBinLow, TotBinHigh);
  hAllRawPMT = new TH1F(TString::Format("hRawPMT"),
            TString::Format("hRawPMT"),
            nTdc+32, 0, nTdc+32);
  hAllGoodLe = new TH1F(TString::Format("hAllGoodLe"),
            TString::Format("hAllGoodLe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hAllGoodTe = new TH1F(TString::Format("hAllGoodTe"),
            TString::Format("hAllGoodTe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hAllGoodTot = new TH1F(TString::Format("hAllGoodTot"),
            TString::Format("hAllGoodTot"),
            NTotBins, TotBinLow, TotBinHigh);
  hAllGoodPMT = new TH1F(TString::Format("hAllGoodPMT"),
            TString::Format("hAllGoodPMT"),
            nTdc+32, 0, nTdc+32);
  h2AllGoodLe = new TH2F(TString::Format("h2AllGoodLe"),
            TString::Format("h2AllGoodLe"),nTdc,0,nTdc,
            NTDCBins, TDCBinLow, TDCBinHigh);
  h2AllGoodTe = new TH2F(TString::Format("h2AllGoodTe"),
            TString::Format("h2AllGoodTe"),nTdc,0,nTdc,
            NTDCBins, TDCBinLow, TDCBinHigh);
  h2AllGoodTot = new TH2F(TString::Format("h2AllGoodTot"),
            TString::Format("h2AllGoodTot"),nTdc,0,nTdc,
            NTotBins, TotBinLow, TotBinHigh);
  hRefRawLe = new TH1F(TString::Format("hRefRawLe"),
            TString::Format("hRefRawLe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hRefRawTe = new TH1F(TString::Format("hRefRawTe"),
            TString::Format("hRefRawTe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hRefRawTot = new TH1F(TString::Format("hRefRawTot"),
            TString::Format("hRefRawTot"),
            NTotBins, TotBinLow, TotBinHigh);
  hRefRawPMT = new TH1F(TString::Format("hRefRawPMT"),
            TString::Format("hRefRawPMT"),
            2720, 0, 2720);
  hRefGoodLe = new TH1F(TString::Format("hRefGoodLe"),
            TString::Format("hRefGoodLe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hRefGoodTe = new TH1F(TString::Format("hRefGoodTe"),
            TString::Format("hRefGoodTe"),
            NTDCBins, TDCBinLow, TDCBinHigh);
  hRefGoodTot = new TH1F(TString::Format("hRefGoodTot"),
            TString::Format("hRefGoodTot"),
            NTotBins, TotBinLow, TotBinHigh);
  hRefGoodPMT = new TH1F(TString::Format("hRefGoodPMT"),
            TString::Format("hRefGoodPMT"),
            2720, 0, 2720);
  
  
  for(Int_t bar=0; bar<(nBarsTDC); bar++){
    // raw hits
    // leading edge
    hRawLe[bar] = new TH1F(TString::Format("hRawLe_Bar%d",bar),
 	    TString::Format("hRawLe_Bar%d",bar),
	    NTDCBins, TDCBinLow, TDCBinHigh);
    // trailing edge 
    hRawTe[bar] = new TH1F(TString::Format("hRawTe_Bar%d",bar),
	    TString::Format("hRawTe_Bar%d",bar),
	    NTDCBins, TDCBinLow, TDCBinHigh);
    // tot 
    hRawTot[bar] = new TH1F(TString::Format("hRawTot_Bar%d",bar),
			     TString::Format("hRawTot_Bar%d",bar),
			     NTotBins, TotBinLow, TotBinHigh);
    // good hits
    // leading edge
    hGoodLe[bar] = new TH1F(TString::Format("hGoodLe_Bar%d",bar),
 	    TString::Format("hGoodLe_Bar%d",bar),
	    NTDCBins, TDCBinLow, TDCBinHigh);
    // trailing edge 
    hGoodTe[bar] = new TH1F(TString::Format("hGoodTe_Bar%d",bar),
	    TString::Format("hGoodTe_Bar%d",bar),
	    NTDCBins, TDCBinLow, TDCBinHigh);
    // tot 
    hGoodTot[bar] = new TH1F(TString::Format("hGoodTot_Bar%d",bar),
			     TString::Format("hGoodTot_Bar%d",bar),
			     NTotBins, TotBinLow, TotBinHigh);
  }// bar loop


    TString subfile = TString::Format("_%d_%d",RunNumber,nevents);
    TString sInFile = REPLAYED_DIR + "/" + InFilePrefix + subfile + ".root";
    cout << "Input ROOT file = " << sInFile << endl;
  //========================================================= Get data from tree
  if(!T) { 
    // TString sInFile = REPLAYED_DIR + "/" + InFile + ".root";
    cout << "Adding " << sInFile << endl;
    T = new TChain("T");
    T->Add(sInFile);
    
    // disable all branches
    T->SetBranchStatus("*",0);
    // enable branches
    T->SetBranchStatus("earm.cdet.*",1);
    T->SetBranchAddress("earm.cdet.tdc_mult",TCDet::TDCmult);
    
    T->SetBranchAddress("earm.cdet.hits.TDCelemID",TCDet::RawElID);
    T->SetBranchAddress("earm.cdet.hits.t",TCDet::RawElLE);
    T->SetBranchAddress("earm.cdet.hits.t_te",TCDet::RawElTE);
    T->SetBranchAddress("earm.cdet.hits.t_tot",TCDet::RawElTot);

    T->SetBranchAddress("earm.cdet.hit.pmtnum",TCDet::GoodElID);
    T->SetBranchAddress("earm.cdet.hit.tdc_le",TCDet::GoodElLE);
    T->SetBranchAddress("earm.cdet.hit.tdc_te",TCDet::GoodElTE);
    T->SetBranchAddress("earm.cdet.hit.tdc_tot",TCDet::GoodElTot);
    
    T->SetBranchAddress("earm.cdet.hit.xhit",TCDet::GoodX);
    T->SetBranchAddress("earm.cdet.hit.yhit",TCDet::GoodY);
    T->SetBranchAddress("earm.cdet.hit.zhit",TCDet::GoodZ);
    
    T->SetBranchAddress("earm.cdet.hit.row",TCDet::GoodCol);
    T->SetBranchAddress("earm.cdet.hit.col",TCDet::GoodRow);
    T->SetBranchAddress("earm.cdet.hit.layer",TCDet::GoodLayer);

    // enable vector size branches
    T->SetBranchAddress("Ndata.earm.cdet.tdc_mult",&TCDet::NdataMult); 
    T->SetBranchAddress("Ndata.earm.cdet.hits.TDCelemID",&TCDet::NdataRawElID); 
    T->SetBranchAddress("Ndata.earm.cdet.hits.t",&TCDet::NdataRawElLE); 
    T->SetBranchAddress("Ndata.earm.cdet.hits.t_te",&TCDet::NdataRawElTE); 
    T->SetBranchAddress("Ndata.earm.cdet.hits.t_tot",&TCDet::NdataRawElTot); 
    
    T->SetBranchAddress("Ndata.earm.cdet.hit.pmtnum",&TCDet::NdataGoodElID);
    T->SetBranchAddress("Ndata.earm.cdet.hit.tdc_le",&TCDet::NdataGoodElLE);
    T->SetBranchAddress("Ndata.earm.cdet.hit.tdc_te",&TCDet::NdataGoodElTE);
    T->SetBranchAddress("Ndata.earm.cdet.hit.tdc_tot",&TCDet::NdataGoodElTot);
    
    T->SetBranchAddress("Ndata.earm.cdet.hit.xhit",&TCDet::NdataGoodX);
    T->SetBranchAddress("Ndata.earm.cdet.hit.yhit",&TCDet::NdataGoodY);
    T->SetBranchAddress("Ndata.earm.cdet.hit.zhit",&TCDet::NdataGoodZ);
    
    T->SetBranchAddress("Ndata.earm.cdet.hit.row",&TCDet::NdataGoodCol);
    T->SetBranchAddress("Ndata.earm.cdet.hit.col",&TCDet::NdataGoodRow);
    T->SetBranchAddress("Ndata.earm.cdet.hit.layer",&TCDet::NdataGoodLayer);

  }//setting tree
  
  //========================================================= Check no of events
  Int_t Nev = T->GetEntries();
  cout << "N entries in tree is " << Nev << endl;
  Int_t NEventsAnalysis;
  if(nevents==-1) NEventsAnalysis = Nev;
  else NEventsAnalysis = nevents;
  cout << "Running analysis for " << NEventsAnalysis << " events" << endl;
  

  
  //==================================================== Create output root file
  // root file for viewing fits
  
  TString outrootfile = ANALYSED_DIR + "/RawTDC_" + InFilePrefix + subfile + ".root";
  TFile *f = new TFile(outrootfile, "RECREATE");



  //================================================================= Event Loop
  // variables outside event loop
  Int_t EventCounter = 0;
  cout << "Starting Event Loop" << endl;

  // event loop start
  for(Int_t event=0; event<NEventsAnalysis; event++){
    
    T->GetEntry(event);
    // cout << "event " << event << endl;
    EventCounter++;
    if (EventCounter % 1000 == 0) cout <<
				      EventCounter << "/" <<
				      NEventsAnalysis << endl;
    //cout << "Raw TDC hit loop: " << TCDet::NdataRawElID << endl;
    for(Int_t el=0; el<TCDet::NdataRawElID; el++){
	//cout << "Raw ID = " << TCDet::RawElID[el] << " raw le = " << TCDet::RawElLE[el] << " raw te = " << TCDet::RawElTE[el] << " raw tot = " << TCDet::RawElTot[el] << endl;
	if (TCDet::RawElLE[el] >= LeMin/TDC_calib_to_ns && TCDet::RawElLE[el] <= LeMax/TDC_calib_to_ns &&
	        TCDet::RawElTot[el] >= TotMin/TDC_calib_to_ns && TCDet::RawElTot[el] <= TotMax/TDC_calib_to_ns &&
		TCDet::TDCmult[el] < TDCmult_cut ) {
	  if ( !check_bad(TCDet::RawElID[el]) ) {
	   if ( TCDet::RawElID[el] < nTdc ) {
	    hRawLe[(Int_t)TCDet::RawElID[el]]->Fill(TCDet::RawElLE[el]*TDC_calib_to_ns);
	    hRawTe[(Int_t)TCDet::RawElID[el]]->Fill(TCDet::RawElTE[el]*TDC_calib_to_ns);
	    hRawTot[(Int_t)TCDet::RawElID[el]]->Fill(TCDet::RawElTot[el]*TDC_calib_to_ns);
 	    hAllRawLe->Fill(TCDet::RawElLE[el]*TDC_calib_to_ns);
	    hAllRawTe->Fill(TCDet::RawElTE[el]*TDC_calib_to_ns);
	    hAllRawTot->Fill(TCDet::RawElTot[el]*TDC_calib_to_ns);
	    hAllRawPMT->Fill(TCDet::RawElID[el]);

	    h2d_RawLE->Fill(TCDet::RawElLE[el]*TDC_calib_to_ns, (Int_t)TCDet::RawElID[el]);
	    h2d_RawTE->Fill(TCDet::RawElTE[el]*TDC_calib_to_ns, (Int_t)TCDet::RawElID[el]);
	    h2d_RawTot->Fill(TCDet::RawElTot[el]*TDC_calib_to_ns, (Int_t)TCDet::RawElID[el]);

	   } else {
 	    hRefRawLe->Fill(TCDet::RawElLE[el]*TDC_calib_to_ns);
	    hRefRawTe->Fill(TCDet::RawElTE[el]*TDC_calib_to_ns);
	    hRefRawTot->Fill(TCDet::RawElTot[el]*TDC_calib_to_ns);
	    hRefRawPMT->Fill(TCDet::RawElID[el]);
	   }
	  }
	}

    }// all raw tdc hit loop
    
    for(Int_t el=0; el<TCDet::NdataGoodElID; el++){
	if (TCDet::GoodElLE[el] >= LeMin/TDC_calib_to_ns && TCDet::GoodElLE[el] <= LeMax/TDC_calib_to_ns &&
		TCDet::GoodElTot[el] >= TotMin/TDC_calib_to_ns && TCDet::GoodElTot[el] <= TotMax/TDC_calib_to_ns &&
		TCDet::GoodX[el] < xcut && TCDet::TDCmult[el] < TDCmult_cut ) {
	  if ( !check_bad(TCDet::GoodElID[el]) ) {
	   if ( TCDet::GoodElID[el] < nTdc )  {
	    //cout << "el = " << el << "Raw ID = " << TCDet::RawElID[el] << " raw le = " << TCDet::RawElLE[el] << " raw te = " << TCDet::RawElTE[el] << " raw tot = " << TCDet::RawElTot[el] << endl;


	    hGoodLe[(Int_t)TCDet::GoodElID[el]]->Fill(TCDet::GoodElLE[el]*TDC_calib_to_ns);
	    hGoodTe[(Int_t)TCDet::GoodElID[el]]->Fill(TCDet::GoodElTE[el]*TDC_calib_to_ns);
	    hGoodTot[(Int_t)TCDet::GoodElID[el]]->Fill(TCDet::GoodElTot[el]*TDC_calib_to_ns);
	    hAllGoodLe->Fill(TCDet::GoodElLE[el]*TDC_calib_to_ns);
	    hAllGoodTe->Fill(TCDet::GoodElTE[el]*TDC_calib_to_ns);
	    hAllGoodTot->Fill(TCDet::GoodElTot[el]*TDC_calib_to_ns);
	    hAllGoodPMT->Fill(TCDet::GoodElID[el]);
	    h2AllGoodLe->Fill(TCDet::GoodElID[el],TCDet::GoodElLE[el]*TDC_calib_to_ns);
	    h2AllGoodTe->Fill(TCDet::GoodElID[el],TCDet::GoodElTE[el]*TDC_calib_to_ns);
	    h2AllGoodTot->Fill(TCDet::GoodElID[el],TCDet::GoodElTot[el]*TDC_calib_to_ns);
	  
 	    //int myrow = (Int_t)TCDet::RawElID[el]%(NumBars*NumPaddles*NumModules);
	    //int mylayer = ((Int_t)TCDet::RawElID[el]/(NumBars*NumPaddles*NumModules))%NumSides;
	    //int mycol = ((Int_t)TCDet::RawElID[el]/(NumBars*NumPaddles*NumModules))%NumSides;
	    //hRow->Fill(myrow);
	    //hLayer->Fill(mylayer);
	    //hCol->Fill(mycol);

	    hHitPMT->Fill((Int_t)TCDet::GoodElID[el]);
	    hRow->Fill((Int_t)TCDet::GoodRow[el]);
	    //std::cout << "Layer = " << (Int_t)TCDet::GoodLayer[el] << " Side = " << (Int_t)TCDet::GoodCol[el] << std::endl;
	    int sbscol = (Int_t)TCDet::GoodCol[el];
	    int myside = sbscol%2;
	    int mylayer = sbscol/2;
	
	    if (myside == 0) {
		if (mylayer == 0) {
			hRowLayer1Side1->Fill((Int_t)TCDet::GoodRow[el]);
		} else {
			hRowLayer2Side1->Fill((Int_t)TCDet::GoodRow[el]);
		}
	    } else {
		if(mylayer == 0) {
			hRowLayer1Side2->Fill((Int_t)TCDet::GoodRow[el]);
		} else {
			hRowLayer2Side2->Fill((Int_t)TCDet::GoodRow[el]);
		}
	    }	
			
	    hCol->Fill(myside);
	    hLayer->Fill(mylayer);

	    hHitX->Fill(TCDet::GoodX[el]);
	    hHitY->Fill(TCDet::GoodY[el]);
	    hHitZ->Fill(TCDet::GoodZ[el]);
	    if (mylayer==0) {
		hHitXY1->Fill(TCDet::GoodY[el],TCDet::GoodX[el]);
	    } else {
		hHitXY2->Fill(TCDet::GoodY[el],TCDet::GoodX[el]);
	    }
	   } else {
	    hRefGoodLe->Fill(TCDet::GoodElLE[el]*TDC_calib_to_ns);
	    hRefGoodTe->Fill(TCDet::GoodElTE[el]*TDC_calib_to_ns);
	    hRefGoodTot->Fill(TCDet::GoodElTot[el]*TDC_calib_to_ns);
	    hRefGoodPMT->Fill(TCDet::GoodElID[el]*TDC_calib_to_ns);
	   }
	  }
	}


    }// all good tdc hit loop

    //cout << "Element loop: " << TCDet::NdataMult << endl;
    for(Int_t tdc=0; tdc<TCDet::NdataMult; tdc++){
      if (!check_bad(TCDet::RawElID[tdc])) {
      hMultiplicity->Fill(TCDet::TDCmult[tdc]);
	hMultiplicityL[(Int_t)TCDet::RawElID[tdc]]->Fill(TCDet::TDCmult[tdc]);
	if( TCDet::TDCmult[tdc] != 0 )
	  h2d_Mult->Fill(TCDet::TDCmult[tdc], (Int_t)TCDet::RawElID[tdc] );
      }
    }// element loop


  }// event loop

  for (Int_t b=0; b<nBarsTDC; b++) {
	if (hRawLe[b]->GetEntries() > EventCounter/HotChannelRatio) {
		int myhotlayer = b/1344 + 1;
		int myhotside = (b%1344)/672 + 1;
		int myhotmodule = (b%672)/244 + 1;
		int myhotbar = (b%672)%244/16 + 1;
		int myhotpaddle = ((b%672)%244)%16 + 1;
		std::cout << "Hot PMT!! ID = " << b << "  layer = " << myhotlayer <<
		"   side = " << myhotside << "   module = " << myhotmodule <<
		"   bar = " << myhotbar << "   paddle_PMT = " << myhotpaddle << std::endl;
	}
  }
  
    
    //========================================================== Write histos
  for(Int_t b=0; b<nBarsTDC; b++){
    // hRawLe[b]->GetXaxis()->SetLabelSize(0.06);
    hRawLe[b]->GetXaxis()->SetTitle("time (ns)");
    // hRawLe[b]->GetXaxis()->SetTitleSize(0.05);
    hRawLe[b]->Write();
    // hRawLe[b]->GetXaxis()->SetLabelSize(0.06);
    hRawTe[b]->GetXaxis()->SetTitle("time (ns)");
    // hRawTe[b]->GetXaxis()->SetTitleSize(0.05);
    hRawTe[b]->Write();
    // hRawTe[b]->GetXaxis()->SetLabelSize(0.06);
    hRawTot[b]->GetXaxis()->SetTitle("tot (ns)");
    // hRawTot[b]->GetXaxis()->SetTitleSize(0.05);
    hRawTot[b]->Write();
    // hMultiplicityL[b]->GetXaxis()->SetLabelSize(0.06);
    hMultiplicityL[b]->GetXaxis()->SetTitle("tdc ref hit mult");
    hMultiplicityL[b]->Write();
  }
  // hMultiplicity->GetXaxis()->SetLabelSize(0.06);
  hMultiplicity->GetXaxis()->SetTitle("tdc hit multiplicity");
  hMultiplicity->Write();
  // hHitPMT->GetXaxis()->SetLabelSize(0.06);
  hHitPMT->GetXaxis()->SetTitle("Bar ID of Left PMT Hit");
  hHitPMT->SetTitle("");
  hHitPMT->Write();

  // 2D histograms
  h2d_RawLE->GetXaxis()->SetTitle("TDC Leading Edge Time [ns]");
  h2d_RawLE->GetYaxis()->SetTitle("PMT number (Left)");
  h2d_RawLE->SetTitle("");
  h2d_RawLE->Write();
  h2d_RawTE->GetXaxis()->SetTitle("TDC Trailing Edge Time [ns]");
  h2d_RawTE->GetYaxis()->SetTitle("PMT number (Left)");
  h2d_RawTE->SetTitle("");
  h2d_RawTE->Write();

  h2d_RawTot->GetXaxis()->SetTitle("TDC Time-over-threshold [ns]");
  h2d_RawTot->GetYaxis()->SetTitle("PMT number (Left)");
  h2d_RawTot->SetTitle("");
  h2d_RawTot->Write();

  h2d_Mult->GetXaxis()->SetTitle("TDC Multiplicity [ns]");
  h2d_Mult->GetYaxis()->SetTitle("PMT number (Left)");
  h2d_Mult->SetTitle("");
  h2d_Mult->Write();

  //========================================================== Close output file
  f->Close();



  //================================================================== End Macro
}// end main

TCanvas *plotAllTDC(){

  TCanvas *caa = new TCanvas("all", "all", 50,50,1200,800);
  caa->Divide(2,4,0.01,0.01,0);
  
  caa->cd(1);
  hAllRawLe->Draw();
  caa->cd(2);
  hAllRawTe->Draw();
  caa->cd(3);
  gPad->SetLogy();
  hAllRawTot->Draw();
  caa->cd(4);
  gPad->SetLogy();
  hAllRawPMT->Draw();
  caa->cd(5);
  hAllGoodLe->Draw();
  caa->cd(6);
  hAllGoodTe->Draw();
  caa->cd(7);
  gPad->SetLogy();
  hAllGoodTot->Draw();
  caa->cd(8);
  gPad->SetLogy();
  hAllGoodPMT->Draw();

  return caa;
}

TCanvas *plotGoodTDC2D(){

  TCanvas *cac = new TCanvas("all2d", "all2d", 50,50,800,800);
  cac->Divide(2,2,0.01,0.01,0);
  
  cac->cd(1);
  gPad->SetLogz();
  h2AllGoodLe->Draw("colz");
  cac->cd(2);
  gPad->SetLogz();
  h2AllGoodTe->Draw("colz");
  cac->cd(3);
  gPad->SetLogz();
  h2AllGoodTot->Draw("colz");

  return cac;
}

TCanvas *plotRefTDC() {

  TCanvas *cbb = new TCanvas("ref", "ref", 850,50, 1200,800);
  cbb->Divide(2,4,0.01,0.01,0);

  cbb->cd(1);
  hRefRawLe->Draw();
  cbb->cd(2);
  hRefRawTe->Draw();
  cbb->cd(3);
  gPad->SetLogy();
  hRefRawTot->Draw();
  cbb->cd(4);
  gPad->SetLogy();
  hRefRawPMT->Draw();
  cbb->cd(5);
  hRefGoodLe->Draw();
  cbb->cd(6);
  hRefGoodTe->Draw();
  cbb->cd(7);
  gPad->SetLogy();
  hRefGoodTot->Draw();
  cbb->cd(8);
  gPad->SetLogy();
  hRefGoodPMT->Draw();

  return cbb;
}


TCanvas *plotCDetTDC(){

  TCanvas *canvas[NumHalfModules];
  for (int cmodule=1;cmodule<=NumModules;cmodule++) {
   for (int layer=1;layer<=NumLayers;layer++) {
    for (int side=1;side<=NumSides;side++){
     int xposition1 = 100 + (layer-1)*1000 + (side-1)*500;
     int yposition1 = 100 + (NumModules-cmodule)*400;
     int xposition2 = 150 + (layer-1)*1000 + (side-1)*500;
     int yposition2 = 150 + (NumModules-cmodule)*400;

     int side_group_plot = 6*(layer-1) + 2*(cmodule-1) + (side-1);
     int elemID_start = (layer-1)*NumModules*NumBars*NumPaddles*NumLayers + (side-1)*NumModules*NumBars*NumPaddles + (cmodule-1)*NumBars*NumPaddles;

     TString cname;
     cname.Form("c1_%d_%d_%d",cmodule,layer,side);
     TCanvas *c1 = new TCanvas(cname, cname, xposition1,yposition1,380,280);
     c1->Divide(NumPaddles,NumBars, 0.01, 0.01, 0);
     canvas[side_group_plot] = c1;

     for (int ii = 0; ii < NumPaddles*NumBars; ii++) {

        c1->cd(ii+1);
        if (ii == 1) {
		cout << "side_group_plot = " << side_group_plot << endl;
	}
	
	hRawTe[elemID_start + ii + 1]->Draw();
	
     }

     cname.Form("c2_%d_%d_%d",cmodule,layer,side);
     TCanvas *c2 = new TCanvas(cname, cname, xposition2,yposition2,380,280);
     c2->Divide(NumPaddles,NumBars, 0.01, 0.01, 0);
     canvas[side_group_plot] = c2;

     for (int ii = 0; ii < NumPaddles*NumBars; ii++) {

        c2->cd(ii+1);
        if (ii == 1) {
                cout << "side_group_plot = " << side_group_plot << endl;
        }

        hRawLe[elemID_start + ii + 1]->Draw();

     }


    }
   }
  }

  return canvas[0];

}

TCanvas *plotHalfModule(int cmodule = 1, int side = 1, int layer = 1){


  TCanvas *c4 = new TCanvas("c4", "c4", 50,50,1000,1200);
  c4->Divide(NumPaddles,NumBars, 0.01, 0.01, 0);
  TCanvas *c4b = new TCanvas("c4b", "c4b", 1050,50,1000,1200);
  c4b->Divide(NumPaddles,NumBars, 0.01, 0.01, 0);

  int side_group_plot = 6*(layer-1) + 2*(cmodule-1) + (side-1);
  int elemID_start = (layer-1)*NumModules*NumBars*NumPaddles*NumLayers + (side-1)*NumModules*NumBars*NumPaddles + (cmodule-1)*NumBars*NumPaddles;


  for (int ii = 0; ii < NumPaddles*NumBars; ii++) {

        c4->cd(ii+1);
  	hRawTe[elemID_start + ii + 1]->Draw();
	c4b->cd(ii+1);
  	hRawLe[elemID_start + ii + 1]->Draw();
  }

  return c4;

}

TCanvas *plotBarTDC(int bar = 39, int side = 1, int layer = 1){

  int mymodule = (bar-1)/NumBars+1; //mymodule in this case represnts top, middle, or bottom as opposed todetector labels whe
  int paddle_start = (bar - (mymodule-1)*NumBars - 1)*NumPaddles;
  std::cout << "mymodule = " << mymodule << "  paddle_start = " << paddle_start << std::endl;

  int side_group = 6*(layer-1) + 2*(mymodule-1) + (side-1);
  int elemID_start = (layer-1)*NumModules*NumBars*NumPaddles*NumLayers + (side-1)*NumModules*NumBars*NumPaddles + (mymodule-1)*NumBars*NumPaddles + paddle_start;


  std::cout << "side_group = " << side_group << std::endl;

  TCanvas *c3 = new TCanvas("c3", "c3", 150,150,600,450);
  c3->Divide(4,4, 0.01, 0.01, 0);
  TCanvas *c333 = new TCanvas("c333", "c333", 750,150,600,450);
  c333->Divide(4,4, 0.01, 0.01, 0);
  TCanvas *c3a = new TCanvas("c3a", "c3a", 150,650,600,450);
  c3a->Divide(4,4, 0.01, 0.01, 0);
  TCanvas *c333a = new TCanvas("c333a", "c333a", 750,650,600,450);
  c333a->Divide(4,4, 0.01, 0.01, 0);

  for (int ii = 1; ii <= NumPaddles; ii++) {

        c3->cd(ii);
  	hRawLe[elemID_start + ii ]->Draw();
  }
  for (int ii = 1; ii <= NumPaddles; ii++) {

        c333->cd(ii);
  	hGoodLe[elemID_start + ii ]->Draw();
  }
  for (int ii = 1; ii <= NumPaddles; ii++) {

        c3a->cd(ii);
  	hRawTe[elemID_start + ii ]->Draw();
  }
  for (int ii = 1; ii <= NumPaddles; ii++) {

        c333a->cd(ii);
  	hGoodTe[elemID_start + ii ]->Draw();
  }

  return c3;

}

TCanvas *plotRowColLayer(){


  TCanvas *c5 = new TCanvas("c5", "c5", 50,50,800,800);
  c5->Divide(4,2, 0.01, 0.01, 0);

  c5->cd(1);
  gPad->SetLogy();
  hRowLayer1Side1->Draw();
  c5->cd(2);
  gPad->SetLogy();
  hRowLayer1Side2->Draw();
  c5->cd(3);
  gPad->SetLogy();
  hRowLayer2Side1->Draw();
  c5->cd(4);
  gPad->SetLogy();
  hRowLayer2Side2->Draw();
  c5->cd(5);
  gPad->SetLogy();
  hRow->Draw();
  c5->cd(6);
  gPad->SetLogy();
  hCol->Draw();
  c5->cd(7);
  gPad->SetLogy();
  hLayer->Draw();
  c5->cd(8);
  gPad->SetLogy();
  hHitPMT->Draw();

  return c5;

}

TCanvas *plotTDC2d(){


  TCanvas *c6 = new TCanvas("c6", "c6", 50,50,800,800);
  c6->Divide(2,2, 0.01, 0.01, 0);

  c6->cd(1);
  h2d_RawLE->Draw();
  c6->cd(2);
  h2d_RawTE->Draw();
  c6->cd(3);
  h2d_RawTot->Draw();
  c6->cd(4);
  h2d_Mult->Draw();

  return c6;

}

auto plotXYZ(){

   TCanvas *c7 = new TCanvas("c7", "c7", 800,800);
   c7->Draw();
   TPad *p1 = new TPad("p1","p1",0.05,0.0,0.45,1.0);
   p1->Draw();
   p1->Divide(1,3);

   p1->cd(1);
   gPad->SetLogy();
   hHitX->Draw();

   p1->cd(2);
   gPad->SetLogy();
   hHitY->Draw();
   
   p1->cd(3);
   gPad->SetLogy();
   hHitZ->Draw();

   c7->cd(0);
   TPad *p2 = new TPad("p1","p1",0.55,0.0,0.95,1.0);
   p2->Draw();
   p2->Divide(2,1);

   p2->cd(1);
   gPad->SetLogz();
   hHitXY1->Draw("colz");
   p2->cd(2);
   gPad->SetLogz();
   hHitXY2->Draw("colz");


  //auto c7 = new TCanvas("c7", "c7", 50,50,800,800);
  //c7->Divide(2,2, 0.01, 0.01, 0);

  //c7->cd(1);
  //gPad->SetLogy();
  //hHitX->Draw();
  //c7->cd(2);
  //gPad->SetLogy();
  //hHitY->Draw();
  //c7->cd(3);
  //gPad->SetLogy();
  //hHitZ->Draw();
  //c7->cd(4);
  //hHitXY->SetTitle("XY Distribution");
  //gPad->SetLogz();
  //hHitXY->Draw("RX RY");

  return c7;

}
